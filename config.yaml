model:
  name: "retinanet"
  backbone: "resnet50"
  num_classes: 2  # Background and tick
  device: "cuda"
  pretrained: true
  freeze_backbone: false  # Added parameter - don't freeze since we're doing a long training

data:
  train_path: "data/images"
  train_annotations: "data/annotations.json"
  val_split: 0.2
  input_size: [640, 640]  # Reduced from 800x800
  mean: [0.485, 0.456, 0.406]  # Added back normalization params
  std: [0.229, 0.224, 0.225]   # Added back normalization params

training:
  # Basic training parameters
  num_epochs: 100          # Increased from 50
  batch_size: 7           # Reduced from 8 to avoid OOM during IoU calculations
  learning_rate: 0.0001   # Initial learning rate
  weight_decay: 0.0001
  
  # Early stopping parameters
  min_epochs: 30          # Must train at least this many epochs
  patience: 10            # More patience before early stopping
  
  # Learning rate scheduling
  lr_scheduler:
    name: "reduce_on_plateau"
    factor: 0.5           # Reduce LR by 50% (was 0.1)
    patience: 8           # Wait 8 epochs before reducing LR (was 5)
    min_lr: 0.00001      # Don't reduce LR below this (was 0.000001)
  
  # Data loading
  num_workers: 4
  pin_memory: true
  prefetch_factor: 2
  persistent_workers: true
  
  # Mixed precision training
  mixed_precision: true
  channels_last: true     # Memory format optimization
  
  # CUDA optimizations
  allow_tf32: true

output:
  checkpoint_dir: "outputs/training/checkpoints"
  output_dir: "outputs"

augmentation:
  train:
    horizontal_flip: true
    vertical_flip: true
    rotate:
      enabled: true
      limit: 45
    scale:
      enabled: true
      min: 0.8
      max: 1.2
    brightness:
      enabled: true
      limit: 0.2
    contrast:
      enabled: true
      limit: 0.2
    blur:
      enabled: true
      limit: 3
    noise:
      enabled: true
      limit: 0.05
  
  val:
    resize_only: true

classes:
  # Update with your class names
  0: "tick"  # Replace with your object name

paths:
  checkpoint_dir: "checkpoints"
  output_dir: "outputs" 
